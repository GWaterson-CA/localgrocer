generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String          @id @default(cuid())
  email      String          @unique
  password   String
  ratings    Rating[]
  households HouseholdUser[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model Household {
  id           String          @id @default(cuid())
  name         String
  potsPref     Int             @default(1)
  prepTimePref Int             @default(20)
  members      Member[]
  storePrefs   StorePref[]
  plans        MealPlan[]
  users        HouseholdUser[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model HouseholdUser {
  householdId String
  userId      String
  role        String
  household   Household @relation(fields: [householdId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@id([householdId, userId])
}

model Member {
  id          String    @id @default(cuid())
  householdId String
  age         Int
  name        String?
  dietTags    String[]
  household   Household @relation(fields: [householdId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model StorePref {
  id          String    @id @default(cuid())
  householdId String
  store       String
  household   Household @relation(fields: [householdId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model MealPlan {
  id          String    @id @default(cuid())
  householdId String
  weekStart   DateTime
  meals       Meal[]
  savings     Float
  household   Household @relation(fields: [householdId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Meal {
  id        String   @id @default(cuid())
  planId    String
  day       Int
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  plan      MealPlan @relation(fields: [planId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Recipe {
  id          String  @id @default(cuid())
  name        String
  isOnePot    Boolean
  prepMinutes Int
  directions  String
  ingredients Json
  nutrition   Json

  /// NEW â€” one-to-many back-reference
  meals Meal[]

  ratings Rating[]
}

model Rating {
  id        String   @id @default(cuid())
  recipeId  String
  userId    String
  score     Int
  comment   String?
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FlyerItem {
  id        String    @id @default(cuid())
  store     String
  sku       String
  name      String
  price     Float
  wasPrice  Float?
  saleEnds  DateTime?
  updatedAt DateTime  @updatedAt
  createdAt DateTime  @default(now())
}
